@using X.PagedList.Mvc.Core
@model X.PagedList.IPagedList<BixWeb.Models.Presente>

@{
    ViewData["Title"] = "Presentes Escolhidos";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Pages/Presentes/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

<!-- Cabeçalho da Página -->
<div class="page-header">
    <div class="page-header-title-container">
        <a asp-controller="Convites" asp-action="Lista" class="form-back-link me-3">
            <i class="bi bi-arrow-left-circle fs-2"></i>
        </a>
        <div class="page-header-content">
            <h1>Sua Lista de Presentes</h1>
            <p class="page-subtitle">Confira os itens selecionados e adicione novos se desejar.</p>
        </div>
    </div>
    <div class="page-header-actions">
        <!-- Seletor de Visualização -->
        <div class="view-toggle btn-group">
            <button id="list-view-btn" class="btn btn-outline-secondary active" title="Visualização em Lista">
                <i class="bi bi-list-ul"></i>
            </button>
            <button id="grid-view-btn" class="btn btn-outline-secondary" title="Visualização em Grade">
                <i class="bi bi-grid-3x3-gap-fill"></i>
            </button>
        </div>
        <a asp-action="BuscarPresente" asp-controller="Eventos" asp-route-id="@ViewBag.codConvite" class="btn btn-primary-action">
            <i class="bi bi-plus-lg me-2"></i>
            Adicionar Mais
        </a>
    </div>
</div>

@if (Model == null || !Model.Any())
{
    <div class="alert alert-light text-center" role="alert">
        Nenhum presente foi selecionado ainda. Comece adicionando itens à sua lista!
    </div>
}
else
{
    <!-- Container para a Visualização em Lista (Tabela) -->
    <div id="list-view-container">
        <div class="table-wrapper">
            <table class="table presentes-table align-middle">
                <thead>
                    <tr>
                        <th class="produto-col">Produto</th>
                        <th class="preco-col text-center">Preço</th>
                        <th class="acoes-col text-center">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td data-label="Produto">
                                <div class="produto-info">
                                    <img src="@item.Imagem" onerror="this.onerror=null; this.src='https://placehold.co/100x80/f98303/FFFFFF?text=Presente';" alt="Imagem de @item.Nome" class="produto-imagem">
                                    <div class="produto-detalhes">
                                        <span class="produto-nome">@item.Nome</span>
                                        <p class="produto-descricao">@item.Descricao</p>
                                    </div>
                                </div>
                            </td>
                            <td data-label="Preço" class="text-center">
                                <span class="produto-preco">@item.Preco.ToString("C")</span>
                            </td>
                            <td data-label="Ações" class="text-center">
                                <a asp-action="Delete" asp-route-id="@item.codPresente" class="btn btn-action-icon btn-action-danger" title="Remover Presente">
                                    <i class="bi bi-trash3-fill"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Container para a Visualização em Grade (Cards) -->
    <div id="grid-view-container" class="d-none">
        <div class="presentes-grid">
            @foreach (var item in Model)
            {
                <div class="presente-card">
                    <div class="presente-imagem-wrapper">
                        <img src="@item.Imagem" onerror="this.onerror=null; this.src='https://placehold.co/600x400/f98303/FFFFFF?text=Presente';" alt="Imagem de @item.Nome" class="presente-imagem-card">
                    </div>
                    <div class="presente-card-body">
                        <h3 class="presente-nome">@item.Nome</h3>
                        <p class="presente-descricao">@item.Descricao</p>
                    </div>
                    <div class="presente-card-footer">
                        <span class="produto-preco">@item.Preco.ToString("C")</span>
                        <a asp-action="Delete" asp-route-id="@item.codPresente" class="btn btn-action-icon btn-action-danger" title="Remover Presente">
                            <i class="bi bi-trash3-fill"></i>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Paginação -->
    @if (Model.PageCount > 1)
    {
        <div class="pagination-wrapper">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
            {
                UlElementClasses = new[] { "pagination", "custom-pagination" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },
                ActiveLiElementClass = "active"
            })
        </div>
    }

    <!-- Botão de Pagamento -->
    <div class="form-action-buttons">
        <a asp-controller="ReciboPresentes" asp-action="Index" class="btn btn-success btn-lg">
            <i class="bi bi-credit-card-fill me-2"></i>
            Ir para o Pagamento
        </a>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // --- Lógica do Seletor de Visualização ---
            const listViewBtn = document.getElementById('list-view-btn');
            const gridViewBtn = document.getElementById('grid-view-btn');
            const listContainer = document.getElementById('list-view-container');
            const gridContainer = document.getElementById('grid-view-container');

            function setView(view) {
                if (view === 'list') {
                    listContainer.classList.remove('d-none');
                    gridContainer.classList.add('d-none');
                    listViewBtn.classList.add('active');
                    gridViewBtn.classList.remove('active');
                    localStorage.setItem('chosenPresentesView', 'list');
                } else { // 'grid'
                    gridContainer.classList.remove('d-none');
                    listContainer.classList.add('d-none');
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                    localStorage.setItem('chosenPresentesView', 'grid');
                }
            }

            listViewBtn.addEventListener('click', () => setView('list'));
            gridViewBtn.addEventListener('click', () => setView('grid'));

            // Ao carregar, define a visualização salva ou usa a lista como padrão
            const savedView = localStorage.getItem('chosenPresentesView') || 'list';
            setView(savedView);
        });
    </script>
}
