@model BixWeb.Models.Cupom

@{
    ViewData["Title"] = "Criar Cupom";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Pages/cupons/criarCupon.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

<!-- Cabeçalho da Página -->
<div class="form-page-header">
    <a asp-action="Index" class="form-back-link">
        <i class="bi bi-arrow-left-circle fs-2"></i>
    </a>
    <h1 class="form-page-title">Cadastrar Cupom</h1>
</div>

<!-- Formulário Principal -->
<div class="form-main-card">
    <form asp-action="Create" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        
        <!-- Div para armazenar os inputs ocultos dos produtos selecionados -->
        <div id="hidden-selected-products"></div>
        
        <div class="coupon-form-wrapper">
            <!-- Coluna do Formulário -->
            <div class="coupon-form-column">
                <h2 class="form-section-title">Dados do Cupom</h2>
                <div class="form-fields">
                    <!-- Tag/Nome -->
                    <div class="form-group full-width">
                        <label asp-for="tokenCupom" class="form-label">Tag/Nome Promocional</label>
                        <input asp-for="tokenCupom" class="form-control" placeholder="#SUPERDESCONTO" id="coupon-tag" />
                        <span asp-validation-for="tokenCupom" class="text-danger"></span>
                    </div>

                    <!-- Valor e Validade -->
                    <div class="form-group">
                        <label asp-for="descontoCupom" class="form-label">Valor do Desconto (%)</label>
                        <input asp-for="descontoCupom" type="number" class="form-control" placeholder="20" id="coupon-value" />
                        <span asp-validation-for="descontoCupom" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="validadeCupom" class="form-label">Validade</label>
                        <input asp-for="validadeCupom" type="datetime-local" class="form-control" id="coupon-validity" />
                        <span asp-validation-for="validadeCupom" class="text-danger"></span>
                    </div>

                    <!-- Filial -->
                    <div class="form-group full-width">
                        <label asp-for="codFilial" class="form-label required">Filial</label>
                        <select asp-for="codFilial" class="form-select" asp-items="ViewBag.codFilial" id="codFilial">
                            <option value="">--- Selecione uma Filial ---</option>
                        </select>
                        <span asp-validation-for="codFilial" class="text-danger"></span>
                    </div>
                    
                    <!-- Campanha -->
                    <div class="form-group full-width">
                        <label asp-for="codCampanha" class="form-label">Campanha (Opcional)</label>
                        <select asp-for="codCampanha" class="form-select" asp-items="ViewBag.codCampanha" id="codCampanha" disabled>
                             <option value="">Selecione uma filial primeiro</option>
                        </select>
                        <span asp-validation-for="codCampanha" class="text-warning"></span>
                    </div>
                    
                    <!-- Quantidade e Produtos -->
                    <div class="form-group">
                        <label for="qtdCupons" class="form-label">Quantidade</label>
                        <input id="qtdCupons" name="qtdCupons" type="number" min="1" class="form-control" placeholder="100">
                        <span class="text-danger">@ViewData["qtdCupons"]</span>
                    </div>
                    
                    <!-- Campo Produtos com Desconto -->
                    <div class="form-group">
                        <label class="form-label">Produtos com Desconto</label>
                        <div class="products-selection-wrapper">
                            <div class="products-display-field">
                                <input type="text" class="form-control" placeholder="Nenhum produto selecionado" readonly id="selectedProductsDisplay">
                            </div>
                            <button type="button" class="btn btn-primary products-btn" id="btnVerProdutos">
                                <i class="bi bi-eye me-2"></i>
                                Ver Produtos
                            </button>
                        </div>
                        <span class="text-danger">@ViewData["produto"]</span>
                        
                        <!-- Container para produtos selecionados -->
                        <div id="selectedProductsContainer" class="selected-products-container mt-3" style="display: none;">
                            <div class="selected-products-header">
                                <h6 class="mb-0">Produtos Selecionados:</h6>
                            </div>
                            <div id="selectedProductsList" class="selected-products-list">
                                <!-- Produtos selecionados aparecerão aqui -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Coluna do Preview do Cupom -->
            <div class="coupon-preview-column">
                <div class="coupon-preview" id="coupon-preview-card">
                    <div class="coupon-header">
                         <img src="https://placehold.co/40x40/f98303/FFFFFF?text=P" alt="Logo" class="coupon-logo"/>
                        <span class="coupon-brand">Papi Fast</span>
                    </div>
                    <div class="coupon-body">
                        <p class="coupon-value" id="preview-value">20%</p>
                        <p class="coupon-tag" id="preview-tag">#SUPERDESCONTO</p>
                    </div>
                    <div class="coupon-footer">
                        <p class="coupon-validity" id="preview-validity">
                            Válido até 00/00/0000
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões de Ação -->
        <div class="form-action-buttons">
            <a asp-action="Index" class="btn btn-light">Cancelar</a>
            <button type="submit" class="btn btn-primary d-flex align-items-center">
                <i class="bi bi-check-circle me-2"></i>
                Cadastrar
            </button>
        </div>
    </form>
</div>

<!-- Modal para Seleção de Produtos -->
<div class="modal fade" id="produtosModal" tabindex="-1" aria-labelledby="produtosModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="produtosModalLabel">
                    <i class="bi bi-box-seam me-2"></i>
                    Selecionar Produtos para Desconto
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div id="produtos-loading" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando produtos...</span>
                    </div>
                    <p class="mt-3 text-muted">Carregando produtos disponíveis...</p>
                </div>
                
                <div id="produtos-content" style="display: none;">
                    <!-- Conteúdo da ViewProduto será carregado aqui -->
                </div>
                
                <div id="produtos-error" style="display: none;" class="alert alert-warning m-4">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <span id="produtos-error-message">Por favor, selecione uma filial primeiro para visualizar os produtos disponíveis.</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmarSelecaoProdutos">
                    <i class="bi bi-check-circle me-2"></i>
                    Confirmar Seleção
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Lógica para carregar campanhas baseadas na filial
        const filialSelect = document.getElementById('codFilial');
        const campanhaSelect = document.getElementById('codCampanha');
        filialSelect.addEventListener('change', function () {
            const filialId = this.value;
            campanhaSelect.innerHTML = '<option value="">Carregando...</option>';
            campanhaSelect.disabled = true;
            if (!filialId) {
                campanhaSelect.innerHTML = '<option value="">Selecione uma filial primeiro</option>';
                return;
            }
            fetch(`/Cupons/ListaCampanhas/${filialId}`)
                .then(response => response.json())
                .then(data => {
                    campanhaSelect.innerHTML = '<option value="">Nenhuma (cupom avulso)</option>';
                    if (data && data.length > 0) {
                        data.forEach(item => {
                            const option = new Option(item.nomeCampanha, item.codCampanha);
                            campanhaSelect.add(option);
                        });
                    }
                    campanhaSelect.disabled = false;
                })
                .catch(error => {
                    console.error('Erro ao buscar campanhas:', error);
                    campanhaSelect.innerHTML = '<option value="">Erro ao carregar</option>';
                });
        });

        // Lógica do Cupom Interativo
        const couponTagInput = document.getElementById('coupon-tag');
        const couponValueInput = document.getElementById('coupon-value');
        const validityInput = document.getElementById('coupon-validity');
        const previewTag = document.getElementById('preview-tag');
        const previewValue = document.getElementById('preview-value');
        const previewValidity = document.getElementById('preview-validity');

        function updatePreview() {
            let tagText = couponTagInput.value.trim().toUpperCase();
            if (tagText && !tagText.startsWith('#')) tagText = '#' + tagText;
            previewTag.textContent = tagText || '#NOME DA TAG';
            
            const value = couponValueInput.value || '0';
            previewValue.textContent = `${value}%`;

            if (validityInput.value) {
                const date = new Date(validityInput.value);
                previewValidity.textContent = `Válido até ${date.toLocaleDateString('pt-BR', { timeZone: 'UTC' })}`;
            } else {
                previewValidity.textContent = 'Válido até 00/00/0000';
            }
        }
        [couponTagInput, couponValueInput, validityInput].forEach(el => el.addEventListener('input', updatePreview));
        updatePreview();
        
        // =========================================================
        // FUNCIONALIDADE DO MODAL DE PRODUTOS
        // =========================================================
        
        let selectedProducts = [];
        const produtosBootstrapModal = new bootstrap.Modal(document.getElementById('produtosModal'));
        const btnVerProdutos = document.getElementById('btnVerProdutos');
        const selectedProductsDisplay = document.getElementById('selectedProductsDisplay');
        const selectedProductsContainer = document.getElementById('selectedProductsContainer');
        const selectedProductsList = document.getElementById('selectedProductsList');
        const hiddenProductsContainer = document.getElementById('hidden-selected-products');
        
        btnVerProdutos.addEventListener('click', function() {
            const filialId = filialSelect.value;
            if (!filialId) {
                document.getElementById('produtos-error-message').textContent = 'Por favor, selecione uma filial primeiro para visualizar os produtos.';
                document.getElementById('produtos-loading').style.display = 'none';
                document.getElementById('produtos-content').style.display = 'none';
                document.getElementById('produtos-error').style.display = 'block';
                produtosBootstrapModal.show();
                return;
            }
            produtosBootstrapModal.show();
            carregarProdutos(filialId);
        });
        
        function carregarProdutos(filialId) {
            document.getElementById('produtos-loading').style.display = 'block';
            document.getElementById('produtos-content').style.display = 'none';
            document.getElementById('produtos-error').style.display = 'none';
            
            fetch(`/Cupons/ViewProduto?codfilial=${filialId}`)
                .then(response => response.ok ? response.text() : Promise.reject('Erro ao carregar produtos'))
                .then(html => {
                    document.getElementById('produtos-loading').style.display = 'none';
                    const contentDiv = document.getElementById('produtos-content');
                    contentDiv.innerHTML = html;
                    contentDiv.style.display = 'block';
                    setupModalEventListeners();
                    restorePreviousSelections();
                })
                .catch(error => {
                    console.error('Erro:', error);
                    document.getElementById('produtos-loading').style.display = 'none';
                    document.getElementById('produtos-error-message').textContent = 'Ocorreu um erro ao carregar os produtos. Tente novamente.';
                    document.getElementById('produtos-error').style.display = 'block';
                });
        }
        
        function setupModalEventListeners() {
            const searchInput = document.getElementById('productSearchInputModal');
            const selectAllCheckbox = document.getElementById('selectAllProducts');
            
            if (searchInput) {
                 searchInput.addEventListener('keyup', function() {
                    const filter = searchInput.value.toLowerCase().trim();
                    document.querySelectorAll('.product-row').forEach(row => {
                        const productName = row.querySelector('.product-name').textContent.toLowerCase();
                        const productCategory = row.querySelector('.product-category').textContent.toLowerCase();
                        row.style.display = (productName.includes(filter) || productCategory.includes(filter)) ? '' : 'none';
                    });
                });
            }
           
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    document.querySelectorAll('.product-checkbox').forEach(checkbox => {
                        const row = checkbox.closest('tr');
                        if (row && row.style.display !== 'none') {
                            checkbox.checked = selectAllCheckbox.checked;
                        }
                    });
                });
            }
        }
        
        function restorePreviousSelections() {
            const selectedIds = selectedProducts.map(p => p.codProduto);
            document.querySelectorAll('.product-checkbox').forEach(checkbox => {
                if (selectedIds.includes(checkbox.value)) {
                    checkbox.checked = true;
                }
            });
        }
        
        document.getElementById('confirmarSelecaoProdutos').addEventListener('click', function() {
            selectedProducts = [];
            document.querySelectorAll('#produtos-content input[type="checkbox"]:checked').forEach(checkbox => {
                const row = checkbox.closest('tr');
                if (row) {
                    selectedProducts.push({
                        codProduto: checkbox.value,
                        nome: row.querySelector('.product-name').textContent.trim(),
                        categoria: row.querySelector('.product-category').textContent.trim(),
                        imagem: row.querySelector('.product-image') ? row.querySelector('.product-image').src : ''
                    });
                }
            });
            atualizarDisplayProdutos();
            produtosBootstrapModal.hide();
        });
        
        function atualizarDisplayProdutos() {
            // Limpa a lista visual e os inputs ocultos
            selectedProductsList.innerHTML = '';
            hiddenProductsContainer.innerHTML = '';

            if (selectedProducts.length === 0) {
                selectedProductsDisplay.value = '';
                selectedProductsDisplay.placeholder = 'Nenhum produto selecionado';
                selectedProductsContainer.style.display = 'none';
                return;
            }
            
            selectedProductsDisplay.value = `${selectedProducts.length} produto(s) selecionado(s)`;
            selectedProductsContainer.style.display = 'block';
            
            selectedProducts.forEach((produto, index) => {
                // Adiciona item à lista visual
                const item = document.createElement('div');
                item.className = 'selected-product-item';
                item.innerHTML = `
                    <div class="selected-product-info">
                        <img src="${produto.imagem}" alt="${produto.nome}" class="selected-product-image" onerror="this.src='https://placehold.co/45x45/CCCCCC/FFFFFF?text=Img'">
                        <div class="selected-product-details">
                            <p class="selected-product-name">${produto.nome}</p>
                            <p class="selected-product-category">${produto.categoria}</p>
                        </div>
                    </div>
                    <button type="button" class="remove-product-btn" data-index="${index}">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                selectedProductsList.appendChild(item);

                // Adiciona o input oculto para o formulário
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = `ProdutoCampanha[${index}].codProduto`;
                hiddenInput.value = produto.codProduto;
                hiddenProductsContainer.appendChild(hiddenInput);
            });
        }
        
        // Delegação de evento para o botão de remover
        selectedProductsList.addEventListener('click', function(e) {
             const removeBtn = e.target.closest('.remove-product-btn');
             if(removeBtn) {
                const indexToRemove = parseInt(removeBtn.dataset.index, 10);
                selectedProducts.splice(indexToRemove, 1);
                atualizarDisplayProdutos();
             }
        });
    });
</script>
}

